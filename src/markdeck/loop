#!/bin/bash
set -e -E -u

PORT=8080
PORT_HELPER=8081
ONCE=false

PARAM=${1:-loop}
case $PARAM in
    shell)  bash -i; exit;;
    --once) ONCE=true;;
    loop)   ;;
    *)      echo "unknown parameter '$PARAM' given, aborting here..." && exit 1;;
esac

shopt -s nullglob
esc=$(printf '\033')
# ansi color codes: http://pueblo.sourceforge.net/doc/manual/ansi_color_codes.html

function print_usage() {
    echo -e "\n\n\n${esc}[1mmarkdeck $VERSION - $MOTTO\n"
    echo -e "       for the slides:  open http://localhost:$PORT${esc}[0m"
    echo
    echo -e "for side-by-side view:  open http://localhost:$PORT/explain.html"
    echo -e "        for utilities:  open http://localhost:$PORT_HELPER"
    echo -e "     to stop markdeck:  hit Ctrl-C"
    echo
    echo
}

function show_errors() {
    rm -f /target/index.html
    echo '<html><head></head><body><pre>' > /target/index.html
    cat /tmp/pandoc.output >> /target/index.html
    echo '</pre></body></html>' >> /target/index.html
    echo -e "${esc}[37m${esc}[43m"
    echo -e "\npandoc crashed\n"
    cat /tmp/pandoc.output
    echo -e "${esc}[0m"
    sleep 4
}

if ! $ONCE; then
    print_usage

    touch /target/index.html

    function wait_for_indexhtml() {
        inotifywait -r -q -q /target/index.html
    }

    (
        echo "service starting"
        live-server \
            --port=$PORT \
            --no-browser \
            --wait=1 \
            --watch=/target/index.html \
            /target
    ) 2>&1 | sed "s/^.*$/${esc}[34m${esc}[3m[liveserver@$PORT]    &${esc}[0m/" &
    pid0=$!

    live-server --port=$PORT_HELPER /markdeck/helper > /tmp/helper.log 2>&1 &
    pid1=$!

    (
        echo "service starting"
        while true; do
            if [[ -x /target/render-pdf ]]; then
                mv /target/render-pdf /target/render-pdf.now
                /target/render-pdf.now || :
                rm -f /target/render-pdf.now
            fi
            [[ -x /target/render-pdf ]] && continue
            wait_for_indexhtml
        done
    ) 2>&1 | sed -u "s/^.*$/${esc}[32m${esc}[3m[render-pdf]         &${esc}[0m/" &
    pid2=$!

    (
        echo "service starting"
        cd /target
        while true; do
            if [[ -e /target/render-standalone ]]; then
                echo "packaging slides and assets"
                standalone="$(cat /target/render-standalone)"
                rm -f /target/render-standalone
                /markdeck/embed < index.html > "$standalone"
                if false; then
                    ZIP_FILE=$(basename "$standalone" .html).zip
                    rm -f "$ZIP_FILE"
                    zip "$ZIP_FILE" "$standalone"
                    du -h "$standalone" "$ZIP_FILE"
                fi
                du -h "$standalone"
                echo "Packaged all slides"
            fi
            [[ -e /target/render-standalone ]] && continue
            wait_for_indexhtml
        done
    ) 2>&1 | sed -u "s/^.*$/${esc}[33m${esc}[3m[render-standalone]  &${esc}[0m/" &
    pid3=$!

    kill_rest(){
        echo
        kill $pid0 $pid1 $pid2 $pid3 2> /dev/null
        wait $pid0 $pid1 $pid2 $pid3 || :
        echo "done."
        exit
    }
    trap kill_rest INT
fi

[[ -e /source/render-asciiart-filter.config ]] && \
    ASCIIART_CONFIG=/source/render-asciiart-filter.config || \
    ASCIIART_CONFIG=/markdeck/lib/render-asciiart-filter.config
export ASCIIART_CONFIG
export ASCIIART_LIBDIR=/markdeck/lib

while true; do
    cd /target
    [[ -d /target/rendered ]] || mkdir -p /target/rendered

    echo "-------- rsync output --------"
    if [[ -d /source/assets/css/fonts ]]; then
        mkdir -p $HOME/.fonts
        rsync -av --delete /source/assets/css/fonts/ $HOME/.fonts
        fc-cache
    fi
    rsync -a /markdeck/assets /target/ || :
    touch /target/assets/css/slides.css /target/assets/css/render-pdf.css
    [[ -d /source/assets ]] && rsync -av /source/assets /target/ || :
    rsync -a /markdeck/explain.html /target/ || :
    echo "-------- /rsync output --------"
    echo

    if [[ -e /source/assets/css/slides.scss ]]; then
        echo "-------- sass output --------"
        sass --scss --no-cache \
            /source/assets/css/slides.scss \
            /target/assets/css/slides.css || :
        sass --scss --no-cache \
            /markdeck/assets/markdeck/css/markdeck.revealjs.scss \
            /target/assets/markdeck/css/markdeck.revealjs.css || :
        sass --scss --no-cache \
            /markdeck/assets/markdeck/css/markdeck.impressjs.scss \
            /target/assets/markdeck/css/markdeck.impressjs.css || :
        echo "-------- /sass output --------"
        echo
    fi

    echo "-------- config --------"
    shopt -s nullglob
    SOURCE_MD=$(echo /source/slide*.md)
    shopt -u nullglob
    METADATA="$(pandoc --template=/markdeck/metadata.template ${SOURCE_MD:-/markdeck/note.md} /markdeck/defaults.yaml)"
    jq '. | .' <<<$METADATA
    variant=$(jq -r '.variant' <<< "$METADATA")
    html=$(jq -r '.html' <<< "$METADATA")
    pdf=$(jq -r '.pdf' <<< "$METADATA")
    pdf_size=$(jq -r '.pdf_size' <<< "$METADATA")
    pdf_delay=$(jq -r '.pdf_delay' <<< "$METADATA")
    standalone=$(jq -r '.standalone' <<< "$METADATA")
    echo "ASCIIART_CONFIG=$ASCIIART_CONFIG"
    echo "-------- /config --------"
    echo

    echo "-------- pandoc output --------"
    PANDOC_ARGS=
    [[ -e /source/include-before-body ]] && PANDOC_ARGS="$PANDOC_ARGS --include-before-body /source/include-before-body"
    [[ -e /source/include-after-body ]] && PANDOC_ARGS="$PANDOC_ARGS --include-after-body /source/include-after-body"
    rm -f /target/slides.combined.md.txt
    cat ${SOURCE_MD:-/markdeck/note.md} > /target/slides.combined.md.txt

    template=/markdeck/template-${variant}.html
    if pandoc \
        --no-highlight \
        -f markdown+yaml_metadata_block \
        -t html5 \
        --standalone \
        --template=$template \
        --section-divs \
        --filter mathjax-pandoc-filter \
        --lua-filter /markdeck/lib/render-asciiart-filter.lua \
        --lua-filter /markdeck/lib/render-emojis-filter.lua \
        --lua-filter /markdeck/lib/bg-shortcut-filter.lua \
        --lua-filter /markdeck/lib/${variant}-shortcut-filter.lua \
        $PANDOC_ARGS \
        -o /target/index.html.tmp \
        /target/slides.combined.md.txt /markdeck/defaults.yaml 2>&1 | tee /tmp/pandoc.output;
    then
        if [[ -e /target/index.html.tmp ]]; then
            if [[ -n "$pdf" ]]; then
                echo "decktape $variant \
                    -s $pdf_size --no-sandbox -p $pdf_delay \
                    'http://localhost:8080/$html?render=pdf' \
                    '/target/$pdf'" > /target/render-pdf
                chmod a+rx /target/render-pdf
            fi
            if [[ -n "$standalone" ]]; then
                echo $standalone > /target/render-standalone
            fi

            mv /target/index.html.tmp /target/index.html
        else
            show_errors
        fi
    else
        show_errors
    fi
    echo "-------- /pandoc output --------"
    echo

    $ONCE && break

    if [[ /source -nt /target/index.html ]]; then
        echo -e "\n\n\nchange detected: sources newer than rendered deck, rerendering started...\n\n\n"
        continue
    fi

    sleep .5
    print_usage

    if [[ -n $SOURCE_MD ]]; then
        inotifywait -r -q -e create -e modify -e delete -e move \
            /source/slide*.md \
            /source/assets/* \
            /markdeck/assets* \
            /markdeck/template*.html \
            /markdeck/lib/ # > /tmp/inotifywait.log 2>&1 || :
    else
        echo -e "edit 'slides.md' now...\n\n\n"
        inotifywait -q /source -e create
    fi
    echo -e "\n\n\n\n\n\n\n\n\n\n"
done

echo "done."
